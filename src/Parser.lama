-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun genInfixParser (op) {
  [s (op), fun (left, op, right) {Binop(op, left, right)}]
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta expr ({[Left, {genInfixParser ("!!")}],
                            [Left, {genInfixParser ("&&")}],
                            [Nona, {genInfixParser ("<"), genInfixParser ("<="), genInfixParser ("=="), 
                                    genInfixParser ("!="), genInfixParser (">="), genInfixParser (">")}],
                            [Left, {genInfixParser ("+"), genInfixParser ("-")}],
                            [Left, {genInfixParser ("*"), genInfixParser ("/"), genInfixParser ("%")}]}, 
                           primary);

var elseElem = memo $ eta syntax (
    kElif cond=exp kThen fst=stmt snd=elseElem { If (cond, fst, snd)}
  | kElse snd=stmt kFi { snd }
  | kFi { Skip }
);

var stmtElem = memo $ eta syntax (
    name=lident s[":="] v=exp {Assn (name, v)}
  | kSkip {Skip}
  | kRead name=inbr[s ("("), lident, s (")")] {Read (name)}
  | kWrite name=inbr[s ("("), exp, s (")")] {Write (name)}
  | kIf cond=exp kThen fst=stmt snd=elseElem {If (cond, fst, snd)}
  | kWhile cond=exp kDo body=stmt kOd {While (cond, body)}
  | kDo body=stmt kWhile cond=exp kOd {DoWhile (body, cond)}
  | kFor decl=stmt s[","] cond=exp s[","] succ=stmt kDo body=stmt kOd 
    {Seq (decl, While (cond, Seq (body, succ)))}
);

var stmt = memo $ eta syntax (
    stmtElem
  | fst=stmtElem s[";"] snd=stmt { Seq (fst, snd) } 
);
   

-- Public top-level parser
public parse = stmt;
