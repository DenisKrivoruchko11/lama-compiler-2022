-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun genInfixOpParser(op) {
  [s (op), fun (l, op, r) {Binop(op, l, r)}]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
        { 
          [Left, {genInfixOpParser ("!!")}],
          [Left, {genInfixOpParser ("&&")}],
          [
            Nona, 
            {
              genInfixOpParser ("=="),
              genInfixOpParser ("!="),
              genInfixOpParser ("<="),
              genInfixOpParser ("<"),
              genInfixOpParser (">="),
              genInfixOpParser (">")
            }
          ],
          [Left, {genInfixOpParser ("+"), genInfixOpParser ("-")}],
          [
            Left, 
            {
              genInfixOpParser ("*"), 
              genInfixOpParser ("/"), 
              genInfixOpParser ("%")
            }
          ]
        }, 
        primary
      );

var stmt = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)}               | 
                              fst=stmt s[";"] snd=stmt end {Seq (fst, snd)}      | 
                              kSkip {Skip}                                       | 
                              kRead x=inbr[s ("("), lident, s (")")] { Read (x)} | 
                              kWrite e=inbr[s ("("), exp, s (")")] { Write (e)}
);
   

-- Public top-level parser
public parse = stmt;
             
