-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop (op, left, right) {
  case op of
    "+"  -> left +  right
  | "-"  -> left -  right
  | "*"  -> left *  right
  | "/"  -> left /  right
  | "%"  -> left %  right
  | "<"  -> left <  right
  | "<=" -> left <= right
  | "!=" -> left != right
  | "==" -> left == right
  | ">=" -> left >= right
  | ">"  -> left >  right
  | "&&" -> left && right
  | "!!" -> left !! right
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var   (name)            -> st (name)
  | Const (val)             -> val
  | Binop (op, left, right) -> evalBinop (op, evalExpr (left), evalExpr (right))
  esac
}
