-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalIns ([stack, st, w], ins) {
  case ins of
    READ         -> case readWorld (w) of [v, w1] -> [v : stack, st, w1] esac
  | WRITE        -> case stack of h : tl -> [tl, st, writeWorld (h, w)] esac
  | BINOP (op)   -> case stack of right : left : tl -> [evalBinop (op, left, right) : tl, st, w] esac
  | LD    (name) -> [st (name) : stack, st, w]
  | ST    (name) -> case stack of h : tl -> [tl, st <- [name, h], w] esac
  | CONST (v)  -> [v : stack, st, w]
  esac
}

fun evalList (c, insns) {
  case insns of
    {} -> c
  | ins : tail -> evalList (evalIns (c, ins), tail)
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  evalList(c, getBuffer (insns))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (name)            -> singletonBuffer (LD (name))
  | Const (v)               -> singletonBuffer (CONST (v))
  | Binop (op, left, right) -> compileExpr (left) <+> compileExpr (right) <+ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn  (name, expr) -> compileExpr (expr) <+ ST (name)
  | Skip               -> emptyBuffer ()
  | Read  (name)       -> singletonBuffer (READ) <+ ST (name)
  | Write (expr)       -> compileExpr (expr) <+ WRITE
  | Seq   (fst, snd)   -> compileSM (fst) <+> compileSM (snd)
  esac
}
