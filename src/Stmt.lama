-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval ([st, w], stmt) {
  case stmt of 
    Assn  (name, expr) -> [st <- [name, evalExpr (st, expr)], w]
  | Skip               -> [st, w]
  | Read  (name)       -> case readWorld (w) of [val, w1] -> [st <- [name, val], w1] esac
  | Write (expr)       -> [st, writeWorld (evalExpr(st, expr), w)]
  | Seq   (fst, snd)   -> eval (eval ([st, w], fst), snd)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
