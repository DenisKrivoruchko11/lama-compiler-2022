-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([st, w], stmt) {
  case stmt of
    Assn    (name, expr)     -> [st <- [name, evalExpr (st, expr)], w]
  | Seq     (fst, snd)       -> eval (eval ([st, w], fst), snd)
  | Skip                     -> [st, w]
  | Read    (name)           -> case readWorld (w) of [v, w1] -> [st <- [name, v], w1] esac
  | Write   (expr)           -> [st, writeWorld (evalExpr(st, expr), w)]
  | If      (cond, fst, snd) -> eval ([st, w], if evalExpr (st, cond) then fst else snd fi)
  | While   (cond, body)     -> if evalExpr (st, cond) then eval (eval ([st, w], body), stmt) else [st, w] fi
  | DoWhile (body, cond)     -> eval (eval ([st, w], body), While (cond, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
